OasisLMF Package
================

On this page:
-------------

* :ref:`intro_package`
* :ref:`getting_started`
* :ref:`MDK`


|
.. _intro_package:

Introduction
------------

----

The ``oasislmf`` Python package, loosely called the model development kit (MDK) or the MDK package, provides a command line 
toolkit for developing, testing and running Oasis models end-to-end locally, or remotely via the Oasis API. It can generate 
ground-up losses (GUL), direct/insured losses (IL) and reinsurance losses (RIL). It can also generate deterministic losses 
at all these levels.



|
.. _getting_started:

Getting started:
****************

----

This documentation on the `OasisLMF <https://pypi.org/project/oasislmf/>`_ package go through setting up the environment to run a 
basic pipeline using this package. This will be achieved with the following steps:

* Install `OasisLMF <https://pypi.org/project/oasislmf/>`_
* Generate fake test data
* Read events and stream them
* Construct a model
* Construct a python model
* Carrying out these steps will enable you to understand the basics of how the model pipeline works. It will also enable you 
  to test our installation and contribute to the project.

|

Installing OasisLMF
###################

----

Installing OasisLMF is supported via `pip <https://pypi.org/project/oasislmf/>`_. This can be done by carrying out the 
command below:

.. code-block:: python

   pip install oasislmf

|

To install the `OasisLMF <https://pypi.org/project/oasislmf/>`_ package in relation to a specific branch, carry out the command 
below:

.. code-block:: python

   pip install git+https://github.com/OasisLMF/OasisLMF@some-branch

|

With the command above, the branch ``some-branch`` can be substituted with whatever branch you want to install using pip. 
Once the package is installed, you can move onto the next section: generating fake test data.

|

Generate fake test data
#######################

----

Generating fake test data is necessary in order for the model to take in a range of event IDs, and pass this through to a model 
that is constructed also using the data generated by the fake test data that has been generated. Right now, the aim is to 
generate data that will not break the pipeline. This can be done by creating a 
`JSON <https://docs.python.org/3/library/json.html>`_ configuration file with the content below:

.. code-block:: JSON

   {
      "num_vulnerabilities": 50,
      "num_intensity_bins": 50,
      "num_damage_bins": 50,
      "vulnerability_sparseness": 0.5,
      "num_events": 10000,
      "num_areaperils": 100,
      "areaperils_per_event": 100,
      "intensity_sparseness": 0.5,
      "num_periods": 1000,
      "num_locations": 1000,
      "coverages_per_location": 3,
      "num_layers": 1
   }

|

This will create a range of binary files that we can ingest for our model. Once this 
`JSON <https://docs.python.org/3/library/json.html>`_ file is saved, and you have access to this file, data can be generated with 
the command below:

.. code-block:: python

   oasislmf test model generate-oasis-files -C oasislmf_dummyModel.json

|

The ``-C`` argument points to the `JSON <https://docs.python.org/3/library/json.html>`_  configuration file. Once this runs, 
there will be the following file:

* **events.bin:** contains the event IDs that the model is going to compute
* **footprint.bin:** contains data about the probability of disasters occurring within an intensity bin in a geographical 
  location
* **footprint.idx:** contains the offset and location in the ``footprint.bin`` file for the model
* **vulnerability.bin:** contains the data about the probability of the disasters causing damage within a damage bin in a 
  geographical location
* **occurrence.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **damage_bin_dict.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **coverages.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **fm_policytc.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **fm_programme.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **fm_xref.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **fm_profile.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **fmsummaryxref.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **gulsummaryxref.bin:** [PLEASE ADD AN DESCRIPTION HERE]
* **items.bin:** [PLEASE ADD AN DESCRIPTION HERE]

Now have all the data that is needed to run the model. Now this data can be examined for reading events and streaming them.

|

Read events and stream them
###########################

----

Before reading and streaming the event IDs,  an input directory has to be created and the events need ot be copied into this with 
the command below:

.. code-block:: python

   mkdir input && cp events.bin ./input/events.bin

|

This gives the event IDs in our input directory. These can be read and streamed with the command below:

.. code-block:: python

   eve 1 1

|

[ENTER DESCRIPTION ABOUT THE 1 1]

Running this gives  a byte stream that cannot be read by the human eyes as it looks like the printout snippet below:

.. code-block:: python

   �!�"�#�$�%�&�'�(�)�*�+�,�-�.�/�0�1�2

|

The ``getmodel`` that is next in the pipeline will process this stream. However, if you want to process this yourself in 
Python, this can be done using the `struct <https://docs.python.org/3/library/struct.html>`_ module with the code below:

.. code-block:: python

   import sys
   import struct

   data = sys.stdin.buffer.read()
   eve_raw_data = [data[i:i + 4] for i in range(0, len(data), 4)]
   eve_buffer = [struct.unpack("i", i)[0] for i in eve_raw_data]

|
The event IDs are integers. Because integers take up 4 bytes each, the data needs to be looped through, breaking it into chunks 
or 4 bytes and using the `struct <https://docs.python.org/3/library/struct.html>`_ module to unpack this giving us a list of 
integers that are event IDs. This is used to construct a model.

|

Construct a model
#################

----

Before using a model, it has to be ensured that the correct data is in the ``static`` and ``input`` directories with the 
command below:

.. code-block:: python

   mkdir static && cp footprint.bin ./static/footprint.bin && cp items.bin ./input/items.bin && cp vulnerability.bin 
   ./static/vulnerability.bin && cp damage_bin_dict.bin ./static/damage_bin_dict.bin && cp footprint.idx 
   ./static/footprint.idx

|

Now that the data is in the correct directories, the ``getmodel`` command can be ran and the output is dumped into a ``csv`` file 
with the command below:

.. code-block:: python

   eve 1 1 | getmodel | cdftocsv > dump.csv

|

This streams the event IDs into the ``getmodel``, the model is then passed into the ``cdftocsv`` and the output of this is 
dumped into a ``csv`` file called ``dump.csv``. The outcome in the ``dump.csv`` will look similar to the outcome below:

.. csv-table::
    :header: "event_id", "areaperil_id", "vulnerability_id", "bin_index", "prob_to", "bin_mean"

    "1", "7", "3", "1", "0.104854", "0.00000"
    "1", "7", "3", "2", "0.288763", "0.0625 "
    "1", "7", "3", "3", "0.480476", "0.187500"
    "1", "7", "3", "4", "0.505688", "0.312500"
    "..", "..", "..", "..", "..", ".."
    "1", "7", "3", "10", "1", "1"
    "1", "7", "9", "1", "0.194455", "0.00000"
|


Here the ``prob_to`` is the probability of an event happening multiplied by the probability of damage happening. The 
probability of ``prob_to`` for all ``bin_indexs`` for a specific ``vulnerability_id``, ``areaperil_id``, and ``event_id``.

|

Construct a Python model
########################

----

When running a Python model, the type of file that being ingested has to be defined. This is because there are only binary 
files present and the Python model ingests ``csv`` files as default. The Python model can be ran with the command below:

.. code-block:: python

   eve 1 1 | getpymodel -f bin | cdftocsv > dump_two.csv

|

This achieves the same as the previous section. However, it runs in the Python model so at this stage it will be slower. The data 
also has to be dumped in the file ``dump_two.csv``.

You have now ran a basic model with fake data. With this knowledge you can now move onto a toy example where the model is run end 
to end. This has not covered everything that goes on in the end to end model however. The toy model goes into more detail.

|

Running an end to end toy model
###############################

----

The toy model is the `Paris windstorm model <https://github.com/OasisLMF/ParisWindstormModel/tree/keys-lookup>`_. First, this repo
needs to be cloned; check you have `OasisLMF <https://pypi.org/project/oasislmf/>`_ pip package installed to run it. 
Once this is done, the model can be ran with the command below:

.. code-block:: python

   oasislmf model run --config oasislmf_mdk.json

|

Here, the model is running using the config file that is already defined in the repo. This will result in a lot of 
printout where the model is being created and then ran. The result can be found in the ``runs`` directory. Here there is a 
losses directory with a random number which denotes the model run. If you run multiple models you will see multiple losses 
directories with multiple unique IDs. The bash script can be inpsected with the command below:

.. code-block:: python

   ParisWindstormModel/runs/losses-XXXXXXXXXXXXXX/run_ktools.sh

|

This bash script is essentially the entire process of constructing the model and running it. There is a lot of moving parts 
here that have not been covered yet, however, if you scroll down you will find this seen below:

.. code-block:: python

   ( eve 1 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 2 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 3 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 4 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 5 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 6 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 7 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...
   ( eve 8 8 | getmodel | gulcalc -S10 -L0 -a0 -i ...

|

This shows how the events have been split into eight different streams and been fed them into our getmodel and then fed the 
results of the getmodel to the rest of the process.




|
.. _MDK:

Model Development Kit (MDK)
***************************

----

The oasislmf Python package comes with a command line interface for creating, testing and managing models.
The tool is split into several namespaces that group similar commands. 
For a full list of namespaces use ``oasislmf --help``, and ``oasislmf <namespace> --help`` for a full list of commands 
available in each namespace.

|

config
######

.. autocli:: oasislmf.cli.config.ConfigCmd
   :noindex:
|

model
#####


``oasislmf model generate-exposure-pre-analysis``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.GenerateExposurePreAnalysisCmd
   :noindex:
|


``oasislmf model generate-keys``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.GenerateKeysCmd
   :noindex:
|

``oasislmf model generate-losses``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.GenerateLossesCmd
   :noindex:
|

``oasislmf model generate-oasis-files``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.GenerateOasisFilesCmd
   :noindex:
|

``oasislmf model run``
^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.RunCmd
   :noindex:
|

exposure
########

``oasislmf exposure run``
^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.model.RunCmd
   :noindex:
|

API client 
##########

``oasislmf api run``
^^^^^^^^^^^^^^^^^^^^^^^^^

.. autocli:: oasislmf.cli.api.RunApiCmd
   :noindex:
|


version
#######

.. autocli:: oasislmf.cli.version.VersionCmd
   :noindex:
|



Run a model using the Oasis MDK 
###############################

----

The Model Development Kit (MDK) is the best way to get started using the Oasis platform.
The MDK is a command line tookit providing command line access to Oasis' modelling functionality. 
It is installed as a Python package, and available from PYPI: `OasisLMF PYPI module <https://pypi.python.org/pypi/oasislmf>`_.

The OasisLMF package has the following dependencies:

|

* Debian

.. code-block:: Debian

   g++, build-essential, libtool, zlib1g-dev, autoconf, unixobdbc-dev

* RHEL

.. code-block:: RHEL

   Development Tools, zlib-devel
|

To install the OasisLMF package run:

.. code-block:: python

   pip install oasislmf
|

.. warning:: Windows is not directly supported for running the MDK.
   You can run the Oasis MDK on Linux or MacOS.
   You can only run on Windows using a docker container or Linux Subsystem (WSL).
|

