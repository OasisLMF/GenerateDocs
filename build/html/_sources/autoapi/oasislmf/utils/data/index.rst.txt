:mod:`oasislmf.utils.data`
==========================

.. py:module:: oasislmf.utils.data


Module Contents
---------------

.. data:: PANDAS_BASIC_DTYPES
   

   

.. data:: PANDAS_DEFAULT_NULL_VALUES
   

   

.. function:: factorize_array(arr)

   Groups a 1D Numpy array by item value, and optionally enumerates the
   groups, starting from 1. The default or assumed type is a Nunpy
   array, although a Python list, tuple or Pandas series will work too.

   :param arr: 1D Numpy array (or list, tuple, or Pandas series)
   :type arr: numpy.ndarray

   :return: A 2-tuple consisting of the enumeration and the value groups
   :rtype: tuple


.. function:: factorize_ndarray(ndarr, row_idxs=[], col_idxs=[])

   Groups an n-D Numpy array by item value, and optionally enumerates the
   groups, starting from 1. The default or assumed type is a Nunpy
   array, although a Python list, tuple or Pandas series will work too.

   :param ndarr: n-D Numpy array (or appropriate Python structure or Pandas dataframe)
   :type ndarr: numpy.ndarray

   :param row_idxs: A list of row indices to use for factorization (optional)
   :type row_idxs: list

   :param col_idxs: A list of column indices to use for factorization (optional)
   :type col_idxs: list

   :return: A 2-tuple consisting of the enumeration and the value groups
   :rtype: tuple


.. function:: factorize_dataframe(df, by_row_labels=None, by_row_indices=None, by_col_labels=None, by_col_indices=None)

   Groups a selection of rows or columns of a Pandas DataFrame array by value,
   and optionally enumerates the groups, starting from 1.

   :param df: Pandas DataFrame
   :type: pandas.DataFrame

   :param by_row_labels: A list or tuple of row labels
   :type by_row_labels: list, tuple

   :param by_row_indices: A list or tuple of row indices
   :type by_row_indices: list, tuple

   :param by_col_labels: A list or tuple of column labels
   :type by_col_labels: list, tuple

   :param by_col_indices: A list or tuple of column indices
   :type by_col_indices: list, tuple

   :return: A 2-tuple consisting of the enumeration and the value groups
   :rtype: tuple


.. function:: fast_zip_arrays(*arrays)

   Speedy zip of a sequence or ordered iterable of Numpy arrays (Python
   iterables with ordered elements such as lists and tuples, or iterators
   or generators of these, will also work).

   :param arrays: An iterable or iterator or generator of Numpy arrays
   :type arrays: list, tuple, collections.Iterator, types.GeneratorType

   :return: A Numpy 1D array of n-tuples of the zipped sequences
   :rtype: np.array


.. function:: fast_zip_dataframe_columns(df, cols)

   Speedy zip of a sequence or ordered iterable of Pandas DataFrame columns
   (Python iterables with ordered elements such as lists and tuples, or
   iterators or generators of these, will also work).

   :param df: Pandas DataFrame
   :type df: pandas.DataFrame

   :param cols: An iterable or iterator or generator of Pandas DataFrame columns
   :type cols: list, tuple, collections.Iterator, types.GeneratorType

   :return: A Numpy 1D array of n-tuples of the dataframe columns to be zipped
   :rtype: np.array


.. function:: get_dataframe(src_fp=None, src_type='csv', src_buf=None, src_data=None, float_precision='high', empty_data_error_msg=None, lowercase_cols=True, required_cols=(), col_defaults={}, non_na_cols=(), col_dtypes={}, sort_cols=None, sort_ascending=None, memory_map=False)

   Loads a Pandas dataframe from a source CSV or JSON file, or a text buffer
   of such a file (``io.StringIO``), or another Pandas dataframe.

   :param src_fp: Source CSV or JSON file path (optional)
   :type src_fp: str

   :param src_type: Type of source file -CSV or JSON (optional; default is csv)
   :param src_type: str

   :param src_buf: Text buffer of a source CSV or JSON file (optional)
   :type src_buf: io.StringIO

   :param float_precision: Indicates whether to support high-precision numbers
                           present in the data (optional; default is high)
   :type float_precision: str

   :param empty_data_error_msg: The message of the exception that is thrown
                               there is no data content, i.e no rows
                               (optional)
   :type empty_data_error_msg: str

   :param lowercase_cols: Whether to convert the dataframe columns to lowercase
                          (optional; default is True)
   :type lowercase_cols: bool

   :param required_cols: An iterable of columns required to be present in the
                         source data (optional)
   :type required_cols: list, tuple, collections.Iterable

   :param col_defaults: A dict of column names and their default values. This
                        can include both existing columns and new columns -
                        defaults for existing columns are set row-wise using
                        pd.DataFrame.fillna, while defaults for non-existent
                        columns are set column-wise using assignment (optional)
   :type col_defaults: dict

   :param non_na_cols: An iterable of names of columns which must be dropped
                       if they contain any null values (optional)
   :type non_na_cols: list, tuple, collections.Iterable

   :param col_dtypes: A dict of column names and corresponding data types -
                      Python built-in datatypes are accepted but are mapped
                      to the corresponding Numpy datatypes (optional)
   :type col_dtypes: dict

   :param sort_cols: An iterable of column names by which to sort the frame
                     rows (optional)
   :type sort_cols: list, tuple, collections.Iterable

   :param sort_ascending: Whether to perform an ascending or descending sort -
                          is used only in conjunction with the sort_cols
                          option (optional)
   :type sort_ascending: bool

   :param memory_map: Memory-efficient option used when loading a frame from
                      a file or text buffer - is a direct optional argument
                      for the pd.read_csv method
   :type memory_map: bool

   :return: A Pandas dataframe
   :rtype: pd.DataFrame


.. function:: get_dtypes_and_required_cols(get_dtypes)

   Get OED column data types and required column names from JSON.

   :param get_dtypes: method to get dict from JSON
   :type get_dtypes: function


.. function:: get_ids(df, usecols, group_by=[])

   Enumerates (counts) the rows of a given dataframe in a given subset
   of dataframe columns, and optionally does the enumeration with
   respect to subgroups of the column subset.

   :param df: Input dataframe
   :type df: pandas.DataFrame

   :param usecols: The column subset
   :param usecols: list

   :param group_by: A subset of the column subset to use a subgroup key
   :param group_by: list

   :return: The enumeration
   :rtype: numpy.ndarray


.. function:: get_json(src_fp)

   Loads JSON from file.

   :param src_fp: Source JSON file path
   :type src_fp: str

   :return: dict
   :rtype: dict


.. function:: get_timestamp(thedate=datetime.now(), fmt='%Y%m%d%H%M%S')

   Get a timestamp string from a ``datetime.datetime`` object

   :param thedate: ``datetime.datetime`` object
   :type thedate: datetime.datetime

   :param fmt: Timestamp format string
   :type fmt: str

   :return: Timestamp string
   :rtype: str


.. function:: get_utctimestamp(thedate=datetime.utcnow(), fmt='%Y-%b-%d %H:%M:%S')

   Get a UTC timestamp string from a ``datetime.datetime`` object

   :param thedate: ``datetime.datetime`` object
   :type thedate: datetime.datetime

   :param fmt: Timestamp format string, default is "%Y-%b-%d %H:%M:%S"
   :type fmt: str

   :return: UTC timestamp string
   :rtype: str


.. function:: merge_check(left, right, on=[], raise_error=True)

   Check two dataframes for keys intersection, use before performing a merge

   :param left: The first of two dataframes to be merged
   :type left: pd.DataFrame

   :param right: The second of two dataframes to be merged
   :type left: pd.DataFrame

   :param on: column keys to test
   :type on: list

   :return: A dict of booleans, True for an intersection between left/right
   :rtype: dict

   {'portnumber': False, 'accnumber': True, 'layer_id': True, 'condnumber': True}


.. function:: merge_dataframes(left, right, join_on=None, **kwargs)

   Merges two dataframes by ensuring there is no duplication of columns.

   :param left: The first of two dataframes to be merged
   :type left: pd.DataFrame

   :param right: The second of two dataframes to be merged
   :type left: pd.DataFrame

   :param kwargs: Optional keyword arguments passed directly to the underlying
                  pd.merge method that is called, including options for the
                  join keys, join type, etc. - please see the pd.merge
                  documentation for details of these optional arguments
   :type kwargs: dict

   :return: A merged dataframe
   :rtype: pd.DataFrame


.. function:: set_dataframe_column_dtypes(df, dtypes)

   A method to set column datatypes for a Pandas dataframe

   :param df: The dataframe to process
   :type df: pd.DataFrame

   :param dtypes: A dict of column names and corresponding Numpy datatypes -
                  Python built-in datatypes can be passed in but they will be
                  mapped to the corresponding Numpy datatypes
   :type dtypes: dict

   :return: The processed dataframe with column datatypes set
   :rtype: pandas.DataFrame


