:mod:`oasislmf.api.client`
==========================

.. py:module:: oasislmf.api.client


Module Contents
---------------

.. py:class:: ApiEndpoint(session, url_endpoint, logger=None)

   Bases: :class:`object`

   Used to Implement the default requests common to all Oasis API
   End points.

   .. method:: create(self, data)



   .. method:: get(self, ID=None)



   .. method:: delete(self, ID)




.. py:class:: FileEndpoint(session, url_endpoint, url_resource, logger=None)

   Bases: :class:`object`

   File Resources Endpoint for Upload / Downloading

   .. method:: _build_url(self, ID)



   .. method:: upload(self, ID, file_path, content_type='text/csv')



   .. method:: download(self, ID, file_path, overwrite=True, chuck_size=1024)



   .. method:: get(self, ID)



   .. method:: get_dataframe(self, ID)


      Return file endpoint as dict of pandas Dataframes:

      either 'application/gzip': search and extract all csv
      or 'text/csv': return as dataframe


   .. method:: post(self, ID, data_object, content_type='application/json')



   .. method:: post_dataframe(self, ID, data_frame)



   .. method:: delete(self, ID)




.. py:class:: API_models(session, url_endpoint)

   Bases: :class:`oasislmf.api.client.ApiEndpoint`

   .. method:: data_files(self, ID)



   .. method:: search(self, metadata)



   .. method:: create(self, supplier_id, model_id, version_id, data_files=[])



   .. method:: update(self, ID, supplier_id, model_id, version_id, data_files=[])




.. py:class:: API_portfolios(session, url_endpoint)

   Bases: :class:`oasislmf.api.client.ApiEndpoint`

   .. method:: search(self, metadata)



   .. method:: create(self, name)



   .. method:: update(self, ID, name)



   .. method:: create_analyses(self, ID, name, model_id)


      Create new analyses from Exisiting portfolio
              



.. py:class:: API_analyses(session, url_endpoint)

   Bases: :class:`oasislmf.api.client.ApiEndpoint`

   .. method:: search(self, metadata)



   .. method:: create(self, name, portfolio_id, model_id, data_files=[])



   .. method:: update(self, ID, name, portfolio_id, model_id, data_files=[])



   .. method:: status(self, ID)



   .. method:: generate(self, ID)



   .. method:: generate_cancel(self, ID)



   .. method:: run(self, ID)



   .. method:: run_cancel(self, ID)



   .. method:: data_files(self, ID)




.. py:class:: APIClient(api_url, api_ver, username, password, timeout=25, logger=None, **kwargs)

   Bases: :class:`object`

   .. method:: oed_peril_codes(self)



   .. method:: upload_inputs(self, portfolio_name=None, portfolio_id=None, location_fp=None, accounts_fp=None, ri_info_fp=None, ri_scope_fp=None)



   .. method:: upload_settings(self, analyses, settings_fp=None)



   .. method:: create_analysis(self, portfolio_id, model_id, analysis_name=None, analysis_settings_fp=None)



   .. method:: run_generate(self, analysis_id, poll_interval=5)


      Generates the inputs for the analysis based on the portfolio.
      The analysis must have one of the following statuses, `NEW`, `INPUTS_GENERATION_ERROR`,
      `INPUTS_GENERATION_CANCELED`, `READY`, `RUN_COMPLETED`, `RUN_CANCELLED` or
      `RUN_ERROR`.


   .. method:: run_analysis(self, analysis_id, analysis_settings_fp=None, poll_interval=5)


      Runs all the analysis. The analysis must have one of the following
      statuses, `NEW`, `RUN_COMPLETED`, `RUN_CANCELLED` or
      `RUN_ERROR`


   .. method:: download_output(self, analysis_id, download_path, filename=None, clean_up=False, overwrite=True)



   .. method:: cancel_generate(self, analysis_id)


      Cancels a currently inputs generation. The analysis status must be `GENERATING_INPUTS`


   .. method:: cancel_analysis(self, analysis_id)


      Cancels a currently running analysis. The analysis must have one of the following
      statuses, `PENDING` or `STARTED`



