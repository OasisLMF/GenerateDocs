:mod:`oasislmf.model_preparation.lookup`
========================================

.. py:module:: oasislmf.model_preparation.lookup


Module Contents
---------------

.. py:class:: OasisBuiltinBaseLookup(config=None, config_json=None, config_fp=None, config_dir=None)

   Bases: :class:`object`

   .. method:: __tweak_config_data__(self)



   .. method:: config(self)
      :property:



   .. method:: peril_ids(self)
      :property:



   .. method:: peril_id_col(self)
      :property:



   .. method:: coverage_types(self)
      :property:



   .. method:: coverage_type_col(self)
      :property:



   .. method:: lookup(self, loc, peril_id, coverage_type, **kwargs)


      Lookup for an individual location item, which could be a dict or a
      Pandas series object.


   .. method:: process_locations_multiproc(self, loc_df)


      Process and return the lookup results a location row
      Used in multiprocessing based query

      location_row is of type <class 'pandas.core.series.Series'>


   .. method:: bulk_lookup(self, locs, **kwargs)


      Bulk vulnerability lookup for a list, tuple, generator, pandas data
      frame or dict of location items, which can be dicts or Pandas series
      objects or any object which has as a dict-like interface.

      Generates results using ``yield``.



.. py:class:: OasisBaseKeysLookup(keys_data_directory=None, supplier=None, model_name=None, model_version=None, complex_lookup_config_fp=None, output_directory=None)

   Bases: :class:`object`

   Old Oasis base class -deprecated

   .. method:: process_locations(self, loc_df)


      Process location rows - passed in as a pandas dataframe.


   .. method:: _get_area_peril_id(self, record)


      Get the area peril ID for a particular location record.


   .. method:: _get_vulnerability_id(self, record)


      Get the vulnerability ID for a particular location record.


   .. method:: _get_area_peril_ids(self, loc_data, include_context=True)


      Generates area peril IDs in two modes - if include_context is
      True (default) it will generate location records/rows including
      the area peril IDs, otherwise it will generate pairs of location
      IDs and the corresponding area peril IDs.


   .. method:: _get_vulnerability_ids(self, loc_data, include_context=True)


      Generates vulnerability IDs in two modes - if include_context is
      True (default) it will generate location records/rows including
      the area peril IDs, otherwise it will generate pairs of location
      IDs and the corresponding vulnerability IDs.


   .. method:: _get_custom_lookup_success(self, ap_id, vul_id)


      Determine the status of the keys lookup.



.. py:class:: OasisLookupFactory

   Bases: :class:`object`

   A factory class to load and run keys lookup services for different
   models/suppliers.

   .. method:: get_model_info(cls, model_version_file_path)
      :classmethod:


      Get model information from the model version file.


   .. method:: get_custom_lookup_package(cls, lookup_package_path)
      :classmethod:


      Returns the lookup service parent package (called `keys_server` and
      located in `src` in the model keys server Git repository or in
      `var/www/oasis` in the keys server Docker container) from the given
      path.


   .. method:: get_custom_lookup(cls, lookup_package, keys_data_path, model_info, complex_lookup_config_fp=None, user_data_dir=None, output_directory=None)
      :classmethod:


      Get the keys lookup class instance.


   .. method:: get_exposure(cls, lookup=None, source_exposure=None, source_exposure_fp=None)
      :classmethod:


      Get the source OED exposure/location data as a Pandas dataframe.


   .. method:: write_oasis_keys_file(cls, records, output_file_path, output_success_msg=False)
      :classmethod:


      Writes an Oasis keys file from an iterable of keys records.


   .. method:: write_oasis_keys_errors_file(cls, records, output_file_path)
      :classmethod:


      Writes an Oasis keys errors file from an iterable of keys records.


   .. method:: write_json_keys_file(cls, records, output_file_path)
      :classmethod:


      Writes the keys records as a simple list to file.


   .. method:: create(cls, model_keys_data_path=None, model_version_file_path=None, lookup_package_path=None, lookup_config=None, lookup_config_json=None, lookup_config_fp=None, complex_lookup_config_fp=None, user_data_dir=None, output_directory=None, builtin_lookup_type='combined')
      :classmethod:


      Creates a keys lookup class instance for the given model and supplier -
      local file paths are required for the model keys data folder, the model
      version file and the Git repository for the model keys server. Returns a
      pair ``(model_info, klc)``, where ``model_info`` is a dictionary holding
      model information from the model version file and `klc` is the lookup
      service class instance for the model.


   .. method:: get_keys_base(cls, lookup, loc_df, success_only=False)
      :classmethod:


      Used when lookup is an instances of `OasisBaseKeysLookup(object)`

      Generates keys records (JSON) for the given model and supplier -
      requires an instance of the lookup service (which can be created using
      the `create` method in this factory class), and either the model
      location file path or the string contents of such a file.

      The optional keyword argument ``success_only`` indicates whether only
      records with successful lookups should be returned (default), or all
      records.


   .. method:: get_keys_builtin(cls, lookup, loc_df, success_only=False)
      :classmethod:


      Used when lookup is an instances of `OasisBuiltinBaseLookup(object)`

      Generates lookup results (dicts) for the given model and supplier -
      requires a lookup instance (which can be created using the `create2`
      method in this factory class), and the source exposures/locations
      dataframe.

      The optional keyword argument ``success_only`` indicates whether only
      results with successful lookup status should be returned (default),
      or all results.


   .. method:: get_keys_multiproc(cls, lookup, loc_df, success_only=False, num_cores=None, num_partitions=None)
      :classmethod:


      Used for CPU bound lookup operations, Depends on a method

      `process_locations_multiproc(dataframe)`

      where single_row is a pandas series from a location Pandas DataFrame
      and returns a list of dicts holding the lookup results for that single row


   .. method:: save_keys(cls, keys_data, keys_file_path=None, keys_errors_file_path=None, keys_format='oasis', keys_success_msg=False)
      :classmethod:


      Writes a keys file, and optionally a keys error file, for the keys
      generated by the lookup service for the given model, supplier and
      exposure sfile - requires a lookup service instance (which can be
      created using the `create` method in this factory class), the path of
      the model location file, the path of the keys file, and the format of
      the output file which can be an Oasis keys file (``oasis``) or a
      simple listing of the records to file (``json``).

      The optional keyword argument ``keys_error_file_path`` if present
      indicates that all keys records, whether for locations with successful
      or unsuccessful lookups, will be generated and written to separate
      files. A keys record with a successful lookup will have a `status`
      field whose value will be `success`, otherwise the record will have
      a `status` field value of `failure` or `nomatch`.

      If ``keys_errors_file_path`` is not present then the method returns a
      pair ``(p, n)`` where ``p`` is the keys file path and ``n`` is the
      number of "successful" keys records written to the keys file, otherwise
      it returns a quadruple ``(p1, n1, p2, n2)`` where ``p1`` is the keys
      file path, ``n1`` is the number of "successful" keys records written to
      the keys file, ``p2`` is the keys errors file path and ``n2`` is the
      number of "unsuccessful" keys records written to keys errors file.


   .. method:: save_results(cls, lookup, location_df, successes_fp=None, errors_fp=None, multiprocessing=True, format='oasis', keys_success_msg=False)
      :classmethod:


      Writes a keys file, and optionally a keys error file, for the keys
      generated by the lookup service for the given model, supplier and
      exposure sfile - requires a lookup service instance (which can be
      created using the `create` method in this factory class), the path of
      the model location file, the path of the keys file, and the format of
      the output file which can be an Oasis keys file (``oasis``) or a
      simple listing of the records to file (``json``).

      The optional keyword argument ``keys_error_file_path`` if present
      indicates that all keys records, whether for locations with successful
      or unsuccessful lookups, will be generated and written to separate
      files. A keys record with a successful lookup will have a `status`
      field whose value will be `success`, otherwise the record will have
      a `status` field value of `failure` or `nomatch`.

      If ``keys_errors_file_path`` is not present then the method returns a
      pair ``(p, n)`` where ``p`` is the keys file path and ``n`` is the
      number of "successful" keys records written to the keys file, otherwise
      it returns a quadruple ``(p1, n1, p2, n2)`` where ``p1`` is the keys
      file path, ``n1`` is the number of "successful" keys records written to
      the keys file, ``p2`` is the keys errors file path and ``n2`` is the
      number of "unsuccessful" keys records written to keys errors file.



.. py:class:: OasisLookup(config=None, config_json=None, config_fp=None, config_dir=None, areas=None, peril_areas=None, peril_areas_index=None, peril_areas_index_props=None, loc_to_global_areas_boundary_min_distance=0, vulnerabilities=None)

   Bases: :class:`oasislmf.model_preparation.lookup.OasisBuiltinBaseLookup`

   Combined peril and vulnerability lookup

   .. method:: lookup(self, loc, peril_id, coverage_type, **kwargs)




.. py:class:: OasisPerilLookup(areas=None, config=None, config_json=None, config_fp=None, config_dir=None, loc_to_global_areas_boundary_min_distance=0, peril_areas=None, peril_areas_index=None, peril_areas_index_fp=None, peril_areas_index_props=None)

   Bases: :class:`oasislmf.model_preparation.lookup.OasisBuiltinBaseLookup`

   Single peril, single coverage type, lon/lat point-area poly lookup using
   an Rtree index to store peril areas - index entries are
   #
   #    (peril area ID, peril area bounds)
   #
   # pairs. Areas must be represented as polygons with vertices which are
   # lon/lat coordinates, and be passed in to the constructor as a list,
   # tuple, or generator of triples of the form
   #
   #    (peril area ID, polygon lon/lat vertices, dict with optional properties)
   #
   # An optional distance measure ``loc_to_global_areas_boundary_min_distance`` can be passed
   # that defines how far, in an abstract unit, a given lon/lat location can be
   # from the boundary of the polygon containing all the individual peril area
   # polygons in order to be assigned an peril area ID. By default this distance
   # is 0, which means any lon/lat location outside the polygon containing all
   # peril area polygons will not be assigned a peril area ID.

   .. method:: lookup(self, loc, peril_id, coverage_type, **kwargs)


      Area peril lookup for an individual lon/lat location item, which can be
      provided as a dict or a Pandas series. The data structure should contain
      the keys `lon` or `longitude` for longitude and `lat` or `latitude` for
      latitude.



.. py:class:: OasisVulnerabilityLookup(config=None, config_json=None, config_fp=None, config_dir=None, vulnerabilities=None)

   Bases: :class:`oasislmf.model_preparation.lookup.OasisBuiltinBaseLookup`

   Simple key-value based vulnerability lookup

   .. method:: get_vulnerabilities(self, vulnerabilities=None)



   .. method:: lookup(self, loc, peril_id, coverage_type, **kwargs)


      Vulnerability lookup for an individual location item, which could be a dict or a
      Pandas series.



