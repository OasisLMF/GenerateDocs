:mod:`oasislmf.model_preparation.summaries`
===========================================

.. py:module:: oasislmf.model_preparation.summaries


Module Contents
---------------

.. function:: get_summary_mapping(inputs_df, oed_hierarchy, is_fm_summary=False)

   Create a DataFrame with linking information between Ktools `OasisFiles`
   And the Exposure data

   :param inputs_df: datafame from gul_inputs.get_gul_input_items(..)  / il_inputs.get_il_input_items(..)
   :type inputs_df: pandas.DataFrame

   :param is_fm_summary: Indicates whether an FM summary mapping is required
   :type is_fm_summary: bool

   :return: Subset of columns from gul_inputs_df / il_inputs_df
   :rtype: pandas.DataFrame


.. function:: merge_oed_to_mapping(summary_map_df, exposure_df, oed_column_set, defaults=None)

   Create a factorized col (summary ids) based on a list of oed column names

   :param :summary_map_df dataframe return from get_summary_mapping
   :type summary_map_df: pandas.DataFrame

   :param exposure_df: Summary map file path
   :type exposure_df: pandas.DataFrame

   :param defaults: Dictionary of vaules to fill NaN columns with
   :type defaults: dict

   {'Col_A': 0, 'Col_B': 1, 'Col_C': 2}

   :return: New DataFrame of summary_map_df + exposure_df merged on exposure index
   :rtype: pandas.DataFrame


.. function:: write_summary_levels(exposure_df, accounts_fp, target_dir)

   Json file with list Available / Recommended columns for use in the summary reporting

   Available: Columns which exists in input files and has at least one non-zero / NaN value
   Recommended: Columns which are available + also in the list of `useful` groupings SUMMARY_LEVEL_LOC

   {
       'GUL': {
           'available': ['accnumber',
                        'locnumber',
                        'istenant',
                        'buildingid',
                        'countrycode',
                        'latitude',
                        'longitude',
                        'streetaddress',
                        'postalcode',
                        'occupancycode',
                        'constructioncode',
                        'locperilscovered',
                        'buildingtiv',
                        'contentstiv',
                        'bitiv',
                        'portnumber'],

       'IL': {
               ... etc ...
       }
   }


.. function:: write_mapping_file(sum_inputs_df, target_dir, is_fm_summary=False)

   Writes a summary map file, used to build summarycalc xref files.

   :param summary_mapping: dataframe return from get_summary_mapping
   :type summary_mapping: pandas.DataFrame

   :param sum_mapping_fp: Summary map file path
   :type sum_mapping_fp: str

   :param is_fm_summary: Indicates whether an FM summary mapping is required
   :type is_fm_summary: bool

   :return: Summary xref file path
   :rtype: str


.. function:: generate_summaryxref_files(model_run_fp, analysis_settings, il=False, ri=False, gul_item_stream=False)

   Top level function for creating the summaryxref files from the manager.py

   :param model_run_fp: Model run directory file path
   :type model_run_fp:  str

   :param analysis_settings: Model analysis settings file
   :type analysis_settings:  dict

   :param il: Boolean to indicate the insured loss level mode - false if the
              source accounts file path not provided to Oasis files gen.
   :type il: bool

   :param ri: Boolean to indicate the RI loss level mode - false if the
              source accounts file path not provided to Oasis files gen.
   :type il: bool

   :param gul_items: Boolean to gul to use item_id instead of coverage_id
   :type gul_items: bool


.. function:: write_exposure_summary(target_dir, gul_inputs_df, exposure_df, exposure_fp, keys_errors_fp, exposure_profile, oed_hierarchy)

   Create exposure summary as dictionary of TIVs and number of locations
   grouped by peril and validity respectively. Writes dictionary as json file
   to disk.

   :param target_dir: directory on disk to write exposure summary file
   :type target_dir: str

   :param gul_inputs_df: dataframe from gul_inputs.get_gul_input_items(..)
   :type gul_inputs_df: pandas.DataFrame

   :param exposure_df: source exposure dataframe
   :type exposure df: pandas.DataFrame

   :param exposure_fp: file path to input exposure file
   :type exposure_fp: str

   :param keys_errors_fp: file path to keys erors file
   :type keys_errors_fp: str

   :param exposure_profile: profile defining exposure file
   :type exposure_profile: dict

   :param oed_hierarchy: exposure dataframe column names
   :type oed_hierarchy: dict

   :return: Exposure summary file path
   :rtype: str


