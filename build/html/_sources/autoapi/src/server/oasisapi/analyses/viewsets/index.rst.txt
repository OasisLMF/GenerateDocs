:mod:`src.server.oasisapi.analyses.viewsets`
============================================

.. py:module:: src.server.oasisapi.analyses.viewsets


Module Contents
---------------

.. py:class:: AnalysisFilter(*args, **kwargs)

   Bases: :class:`src.server.oasisapi.filters.TimeStampedFilter`

   .. py:class:: Meta

      .. attribute:: model
         

         

      .. attribute:: fields
         :annotation: = ['name', 'name__contains', 'status', 'status__in', 'model', 'model__in', 'user']

         


   .. attribute:: name
      

      

   .. attribute:: name__contains
      

      

   .. attribute:: status
      

      

   .. attribute:: status__in
      

      

   .. attribute:: model
      

      

   .. attribute:: model__in
      

      

   .. attribute:: user
      

      


.. py:class:: AnalysisViewSet

   Bases: :class:`rest_framework.viewsets.ModelViewSet`

   list:
   Returns a list of Analysis objects.

   ### Examples

   To get all analyses with 'foo' in their name

       /analyses/?name__contains=foo

   To get all analyses created on 1970-01-01

       /analyses/?created__date=1970-01-01

   To get all analyses updated before 2000-01-01

       /analyses/?modified__lt=2000-01-01

   To get all analyses in the `NEW` state

       /analyses/?status=NEW

   To get all started and pending tasks

       /analyses/?status__in=PENDING&status__in=STARTED

   To get all models in model `1`

       /analyses/?model=1

   To get all models in models `2` and `3`

       /analyses/?model__in=2&model__in=3

   retrieve:
   Returns the specific analysis entry.

   create:
   Creates a analysis based on the input data

   update:
   Updates the specified analysis

   partial_update:
   Partially updates the specified analysis (only provided fields are updated)

   .. attribute:: queryset
      

      

   .. attribute:: serializer_class
      

      

   .. attribute:: filter_class
      

      

   .. attribute:: file_action_types
      :annotation: = ['settings_file', 'set_settings_file', 'input_file', 'lookup_errors_file', 'lookup_success_file', 'lookup_validation_file', 'summary_levels_file', 'input_generation_traceback_file', 'run_traceback_file', 'output_file', 'run_traceback_file']

      

   .. attribute:: task_action_types
      :annotation: = ['run', 'cancel', 'generate_inputs', 'cancel_generate_inputs']

      

   .. method:: get_serializer_class(self)



   .. method:: parser_classes(self)
      :property:



   .. method:: run(self, request, pk=None, version=None)


      Runs all the analysis. The analysis must have one of the following
      statuses, `NEW`, `RUN_COMPLETED`, `RUN_CANCELLED` or
      `RUN_ERROR`


   .. method:: cancel(self, request, pk=None, version=None)


      Cancels a currently running analysis. The analysis must have one of the following statuses, `NEW`, `INPUTS_GENERATION_ERROR`,
      `INPUTS_GENERATION_CANCELED`, `READY`, `RUN_COMPLETED`, `RUN_CANCELLED` or
      `RUN_ERROR`.


   .. method:: generate_inputs(self, request, pk=None, version=None)


      Generates the inputs for the analysis based on the portfolio.
      The analysis must have one of the following statuses, `NEW`, `INPUTS_GENERATION_ERROR`,
      `INPUTS_GENERATION_CANCELED`, `READY`, `RUN_COMPLETED`, `RUN_CANCELLED` or
      `RUN_ERROR`.


   .. method:: cancel_generate_inputs(self, request, pk=None, version=None)


      Cancels a currently inputs generation. The analysis status must be `INPUTS_GENERATION_STARTED`


   .. method:: copy(self, request, pk=None, version=None)


      Copies an existing analysis, copying the associated input files and model and modifying
      it's name (if none is provided) and resets the status, input errors and outputs


   .. method:: settings_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `settings_file` contents

      delete:
      Disassociates the portfolios `settings_file` contents


   .. method:: set_settings_file(self, request, pk=None, version=None)


      post:
      Sets the portfolios `settings_file` contents


   .. method:: input_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `input_file` contents

      delete:
      Disassociates the portfolios `input_file` contents


   .. method:: lookup_errors_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `lookup_errors_file` contents

      post:
      Sets the portfolios `lookup_errors_file` contents

      delete:
      Disassociates the portfolios `lookup_errors_file` contents


   .. method:: lookup_success_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `lookup_success_file` contents

      post:
      Sets the portfolios `lookup_success_file` contents

      delete:
      Disassociates the portfolios `lookup_success_file` contents


   .. method:: lookup_validation_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `lookup_validation_file` contents

      post:
      Sets the portfolios `lookup_validation_file` contents

      delete:
      Disassociates the portfolios `lookup_validation_file` contents


   .. method:: summary_levels_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `summary_levels_file` contents

      post:
      Sets the portfolios `summary_levels_file` contents

      delete:
      Disassociates the portfolios `summary_levels_file` contents


   .. method:: input_generation_traceback_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `input_generation_traceback_file` contents

      delete:
      Disassociates the portfolios `input_generation_traceback_file` contents


   .. method:: output_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `output_file` contents

      delete:
      Disassociates the portfolios `output_file` contents


   .. method:: run_traceback_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `run_traceback_file` contents

      delete:
      Disassociates the portfolios `run_traceback_file` contents


   .. method:: run_log_file(self, request, pk=None, version=None)


      get:
      Gets the portfolios `run_log_file` contents

      delete:
      Disassociates the portfolios `run_log_file` contents


   .. method:: data_files(self, request, pk=None, version=None)




.. py:class:: AnalysisSettingsView

   Bases: :class:`rest_framework.viewsets.ModelViewSet`

   list:
   Return the settings of an Analysis object.

   .. attribute:: queryset
      

      

   .. attribute:: serializer_class
      

      

   .. attribute:: filter_class
      

      

   .. method:: analysis_settings(self, request, pk=None, version=None)


      get:
      Gets the analyses `settings` contents

      post:
      Sets the analyses `settings` contents

      delete:
      Disassociates the portfolios `settings_file` contents



